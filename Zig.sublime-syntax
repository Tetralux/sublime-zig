%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
#
#  TODO:
#
#  - '||' is invalid unless there are errors on both sides.
#
name: Zig
file_extensions:
  - zig
first_line_match: "-[*]-( Mode:)? zig -[*]-"
scope: source.zig
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  type_chars: '[[:alnum:]\s,._^<>\[\]-]'
  screaming_identifier: '\b[A-Z_](?![a-z])[A-Z_0-9]+\b'

contexts:
  main:
    - include: global

  global:
    - include: comments
    - include: function-call
    - include: types
    - include: numbers
    - include: constants
    - include: keywords
    - include: operators
    - include: strings
    - include: string-escaped-char

  comments:
    - include: block-comment
    - match: //
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.line.double-slash.odin
        - match: \n
          pop: true
    - match: "#!"
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.line.double-slash.odin
        - match: \n
          pop: true

  block-comment:
    - match: /\*
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.block.odin
        - match: \*/
          scope: punctuation.definition.comment.odin
          pop: true
        - include: block-comment

  numbers:
    - match: \b([0-9][0-9]*)(\.([0-9][0-9]*))?([Ee](\+|-)?[0-9]+)?\b
      scope: constant.numeric.zig
    - match: \b(0x[0-9a-fA-F]+)\b
      scope: constant.numeric.zig

  keywords:
    - match: \b(error)(\.)({{identifier}})(\s*(\|\|)\s*(error)\.({{identifier}}))?
      captures:
        "1": storage.type.zig
        "5": keyword.operator.zig
        "6": storage.type.zig
        # "3": entity.name.variable.zig
    - match: \b(continue|break|switch|for|while)\b
      scope: keyword.control.zig
    - match: \b(var|const|test|extern|export|pub|defer|inline|noinline|align)\b
      scope: keyword.control.zig
    - match: \b(async|await|cancel|suspend|resume)\b
      scope: keyword.control.zig
    - match: \b(try|catch|orelse|unreachable|error|if|else|return)\b
      scope: keyword.control.zig
    - match: \b(stdcallcc|ccc)\b
      scope: keyword.type.zig
    - match: \b(and|or)\b
      scope: keyword.control.zig
    - match: \b(undefined|comptime|type)\b
      scope: keyword.control.zig
    - match: \b(struct|enum|union)\b
      scope: keyword.control.zig
    - match: \b(fn)\b
      scope: storage.type.zig
    - match: \b(c_int|c_uint|c_short|c_ushort|c_long|c_ulong)\b
      scope: storage.type.zig
    - match: \b(void)\b
      scope: storage.type.zig
    - match: (@{{identifier}})
      scope: support.function.zig
    - match: \b(anyframe)((->)(?=({{identifier}}))?)\b
      captures:
        "1": keyword.control.zig
        "3": keyword.operator.zig

  function-call:
    - match: \b(fn)\s+({{identifier}})\s*\(
      captures:
        "1": storage.type.zig
        "2": entity.name.function.zig

  constants:
    - match: (true|false|null)
      scope: constant.language.zig
    - match: (const)\s*({{identifier}})\s*(=)\s*({{identifier}})\s*\{
      captures:
        "1": keyword.control.zig
        "2": meta.constant.zig entity.name.type.zig
        "3": keyword.operator.zig
        "4": keyword.control.zig

  operators:
    - match: (%(\+|-|\*\/)=)|->|(\|\|)|&&
      scope: invalid.zig
    - match: (\*|\+|-|/|%|\?|!|:|\||=>|=|&|\<|\>|\.\.)
      scope: keyword.operator.zig

  types:
    - match: (usize|isize|bool|comptime_int)
      scope: storage.type.zig
    - match: (u|i)[0-9]+
      scope: storage.type.zig
    - match: (f(32|64))
      scope: storage.type.zig

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.double.odin
        - match: '"'
          scope: punctuation.definition.string.end.odin
          pop: true
        - include: string-escaped-char
    - match: "`"
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.raw.odin
        - match: "`"
          scope: punctuation.definition.string.end.odin
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.raw.odin
        - match: "'"
          scope: punctuation.definition.string.end.odin
          pop: true
        - include: string-escaped-char

  string-escaped-char:
    - match: '\\(\\|[abefnrutv''"]|x\h{2}|u\h{4}|U\h{8}|[0-7]{3})'
      scope: constant.character.escape.odin
    - match: \\.
      scope: invalid.illegal.unknown-escape.odin
