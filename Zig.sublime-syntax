%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
#
#  TODO:
#
#  - '||' is invalid unless there are errors on both sides.
#
name: Zig
file_extensions:
  - zig
first_line_match: "-[*]-( Mode:)? zig -[*]-"
scope: source.zig
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  type_chars: '[[:alnum:]\s,._^<>\[\]-]'
  screaming_identifier: '\b[A-Z_](?![a-z])[A-Z_0-9]+\b'

contexts:
  main:
    - include: global

  global:
    - include: comments
    - include: types
    - include: keywords
    - include: function-definition
    - include: function-call
    - include: numbers
    - include: constants
    - include: operators
    - include: strings
    - include: string-escaped-char
    - include: punctuation

  comments:
    - include: block-comment
    - match: //
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.line.double-slash.odin
        - match: \n
          pop: true
    - match: "#!"
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.line.double-slash.odin
        - match: \n
          pop: true

  block-comment:
    - match: /\*
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.block.odin
        - match: \*/
          scope: punctuation.definition.comment.odin
          pop: true
        - include: block-comment

  numbers:
    - match: \b([0-9][0-9]*)(\.([0-9][0-9]*))?([Ee](\+|-)?[0-9]+)?\b
      scope: constant.numeric.zig
    - match: \b(0x[0-9a-fA-F]+)\b
      scope: constant.numeric.zig
    - match: \b(0b[01_]+)\b
      scope: constant.numeric.zig

  keywords:
    - match: \b(error)\.({{identifier}})\b
      captures:
        "1": storage.type.zig
        # "3": entity.name.variable.zig
    - match: \b(asm|volatile)\b
      scope: keyword.control.zig
    - match: \b(continue|break|switch|for|while)\b
      scope: keyword.control.zig
    - match: \b(var|anytype|const|test|packed|extern|export|pub|defer|errdefer|inline|noinline|align|usingnamespace)\b
      scope: keyword.control.zig
    - match: \b(noasync|async|await|cancel|suspend|resume)\b
      scope: keyword.control.zig
    - match: \b(threadlocal)\b
      scope: keyword.control.zig
    - match: \b(linksection)\b
      scope: keyword.control.zig
    - match: \b(callconv)\b
      scope: keyword.control.zig
    - match: \b(try|catch|orelse|unreachable|noreturn|error|if|else|return|comptime)\b
      scope: keyword.control.zig
    - match: \b(stdcallcc|ccc|nakedcc)\b
      scope: keyword.type.zig
    - match: \b(and|or)\b
      scope: keyword.control.zig
    - match: \b(void|c_void)\b
      scope: storage.type.zig
    - match: \.\s*({{identifier}})(?=!\()
      captures:
        "1": source.zig
    - match: \b({{identifier}})\s*(:|=)\s*(fn)
      captures:
        "1": source.zig entity.name.function.zig
        "2": keyword.operator.zig
        "3": storage.type.zig
    - match: \b({{identifier}})\s*(:|=)
      captures:
        "1": source.zig entity.name.function.zig # should be entity.name.type.zig, but that doesn't show up in CTRL+R...
        "2": keyword.operator.zig
        "3": storage.type.zig
    - match: (?<!\.)\b(type)\b
      scope: keyword.control.zig
    - match: \b(struct|enum|union)\b
      scope: keyword.control.zig
    - match: \b(fn)\b
      scope: storage.type.zig
    - match: \b(c_int|c_uint|c_short|c_ushort|c_long|c_ulong)\b
      scope: storage.type.zig
    - match: "(@{{identifier}})"
    # - match: "@(addWithOverflow|ArgType|atomicLoad|bitCast|breakpoint)"
    #   scope: support.function.zig
    # - match: "@(alignCast|alignOf|cDefine|cImport|cInclude)"
    #   scope: support.function.zig
    # - match: "@(cUndef|canImplicitCast|clz|cmpxchgWeak|cmpxchgStrong|compileError)"
    #   scope: support.function.zig
    # - match: "@(compileLog|ctz|popCount|divExact|divFloor|divTrunc)"
    #   scope: support.function.zig
    # - match: "@(embedFile|export|tagName|TagType|errorName)"
    #   scope: support.function.zig
    # - match: "@(errorReturnTrace|fence|fieldParentPtr|field|unionInit)"
    #   scope: support.function.zig
    # - match: "@(frameAddress|import|inlineCall|newStackCall|asyncCall|intToPtr|IntType)"
    #   scope: support.function.zig
    # - match: "@(maxValue|memberCount|memberName|memberType|as)"
    #   scope: support.function.zig
    # - match: "@(memcpy|memset|minValue|mod|mulWithOverflow|splat)"
    #   scope: support.function.zig
    # - match: "@(noInlineCall|bitOffsetOf|byteOffsetOf|OpaqueType|panic|ptrCast)"
    #   scope: support.function.zig
    # - match: "@(ptrToInt|rem|returnAddress|setCold|Type|shuffle)"
    #   scope: support.function.zig
    # - match: "@(setRuntimeSafety|setEvalBranchQuota|setFloatMode)"
    #   scope: support.function.zig
    # - match: "@(setGlobalLinkage|setGlobalSection|shlExact|This|hasDecl|hasField)"
    #   scope: support.function.zig
    # - match: "@(shlWithOverflow|shrExact|sizeOf|sqrt|byteSwap|subWithOverflow|intCast|floatCast|intToFloat|floatToInt|boolToInt|errSetCast)"
    #   scope: support.function.zig
    # - match: "@(truncate|typeId|typeInfo|typeName|typeOf|atomicRmw|bytesToSlice|sliceToBytes)"
    #   scope: support.function.zig
    # - match: "@(intToError|errorToInt|intToEnum|enumToInt|setAlignStack|frame|Frame|frameSize|bitReverse|Vector)"
    #   scope: support.function.zig
    # - match: "@(sin|cos|exp|exp2|ln|log2|log10|fabs|floor|ceil|trunc|round)"
      scope: support.function.zig
    - match: \b(anyframe)((->)(?=({{identifier}})))?\b
      captures:
        "1": keyword.control.zig
        "3": keyword.operator.zig
    - match: \b(anyerror)(!)?
      captures:
        "1": keyword.control.zig,
        "2": keyword.operator.zig

  function-call:
    - match: ({{identifier}})\s*(?=\()
      scope: meta.function-call.zig

  function-definition:
    - match: \b(?<=fn)\s+({{identifier}})\s*(?=\()
      scope: entity.name.function.zig


  constants:
    - match: \b(true|false|null|undefined|_)\b
      scope: constant.language.zig
    - match: (const)\s*({{identifier}})\s*(=)\s*(enum)\s*(\(\s*({{identifier}})\))?\s*(\{)
      captures:
        "1": keyword.control.zig
        "2": meta.constant.zig entity.name.type.zig
        "3": keyword.operator.zig
        "4": keyword.control.zig
        "6": storage.type.zig
        "8": punctuation.bracket.zig
    - match: (const)\s*({{identifier}})\s*(=)\s*(struct|union|packed|extern)\s*((\(?)({{identifier}})(\)?))*\s*(\{)(?!\s*\.)
      captures:
        "1": keyword.control.zig
        "2": meta.constant.zig entity.name.type.zig
        "3": keyword.operator.zig
        "4": keyword.control.zig
        "6": source.zig
        "7": keyword.type.zig
        "8": source.zig
        "10": punctuation.bracket.zig

  operators:
    - match: (%(\+|-|\*\/)=)|->|&&
      scope: invalid.illegal.zig
    - match: (\*|\+|-|/|%|\?|!|:|\^|\||=>|=|&|\<|\>|\.\.\.?)
      scope: keyword.operator.zig

  types:
    - match: \b(usize|isize|bool|comptime_int)\b
      scope: storage.type.zig
    - match: \b(u|i)[0-9]+\b
      scope: storage.type.zig
    - match: \b(f(16|32|64|128))\b
      scope: storage.type.zig

  strings:
    - match: '@?"'
      scope: punctuation.definition.string.begin.zig
      push:
        - meta_scope: string.quoted.double.zig
        - match: '"'
          scope: punctuation.definition.string.end.zig
          pop: true
        - include: string-escaped-char
    - match: "`"
      scope: punctuation.definition.string.begin.zig
      push:
        - meta_scope: string.quoted.raw.zig
        - match: "`"
          scope: punctuation.definition.string.end.zig
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.zig
      push:
        - meta_scope: string.quoted.raw.zig
        - match: "'"
          scope: punctuation.definition.string.end.zig
          pop: true
        - include: string-escaped-char

  string-escaped-char:
    - match: '\\(\\|[abefnrutv''"]|x\h{2}|u\h{4}|U\h{8}|[0-7]{3})'
      scope: constant.character.escape.zig
    - match: \\.
      scope: invalid.illegal.unknown-escape.zig

  punctuation:
    - match: '(\{|\}|\(|\)|\[|\]|;|,)'
      scope: punctuation.zig

